<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuickAssist</name>
    </assembly>
    <members>
        <member name="T:QuickAssist.Connect">
            <summary>The object for implementing an Add-in.</summary>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:QuickAssist.Connect.#ctor">
            <summary>Implements the constructor for the Add-in object. Place your initialization code within this method.</summary>
        </member>
        <member name="M:QuickAssist.Connect.OnConnection(System.Object,Extensibility.ext_ConnectMode,System.Object,System.Array@)">
            <summary>Implements the OnConnection method of the IDTExtensibility2 interface. Receives notification that the Add-in is being loaded.</summary>
            <param term='application'>Root object of the host application.</param>
            <param term='connectMode'>Describes how the Add-in is being loaded.</param>
            <param term='addInInst'>Object representing this Add-in.</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:QuickAssist.Connect.OnDisconnection(Extensibility.ext_DisconnectMode,System.Array@)">
            <summary>Implements the OnDisconnection method of the IDTExtensibility2 interface. Receives notification that the Add-in is being unloaded.</summary>
            <param term='disconnectMode'>Describes how the Add-in is being unloaded.</param>
            <param term='custom'>Array of parameters that are host application specific.</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:QuickAssist.Connect.OnAddInsUpdate(System.Array@)">
            <summary>Implements the OnAddInsUpdate method of the IDTExtensibility2 interface. Receives notification when the collection of Add-ins has changed.</summary>
            <param term='custom'>Array of parameters that are host application specific.</param>
            <seealso class='IDTExtensibility2' />		
        </member>
        <member name="M:QuickAssist.Connect.OnStartupComplete(System.Array@)">
            <summary>Implements the OnStartupComplete method of the IDTExtensibility2 interface. Receives notification that the host application has completed loading.</summary>
            <param term='custom'>Array of parameters that are host application specific.</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:QuickAssist.Connect.OnBeginShutdown(System.Array@)">
            <summary>Implements the OnBeginShutdown method of the IDTExtensibility2 interface. Receives notification that the host application is being unloaded.</summary>
            <param term='custom'>Array of parameters that are host application specific.</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:QuickAssist.Connect.QueryStatus(System.String,EnvDTE.vsCommandStatusTextWanted,EnvDTE.vsCommandStatus@,System.Object@)">
            <summary>Implements the QueryStatus method of the IDTCommandTarget interface. This is called when the command's availability is updated</summary>
            <param term='commandName'>The name of the command to determine state for.</param>
            <param term='neededText'>Text that is needed for the command.</param>
            <param term='status'>The state of the command in the user interface.</param>
            <param term='commandText'>Text requested by the neededText parameter.</param>
            <seealso class='Exec' />
        </member>
        <member name="M:QuickAssist.Connect.Exec(System.String,EnvDTE.vsCommandExecOption,System.Object@,System.Object@,System.Boolean@)">
            <summary>Implements the Exec method of the IDTCommandTarget interface. This is called when the command is invoked.</summary>
            <param term='commandName'>The name of the command to execute.</param>
            <param term='executeOption'>Describes how the command should be run.</param>
            <param term='varIn'>Parameters passed from the caller to the command handler.</param>
            <param term='varOut'>Parameters passed from the command handler to the caller.</param>
            <param term='handled'>Informs the caller if the command was handled or not.</param>
            <seealso class='Exec' />
        </member>
        <member name="T:Peter.ShellContextMenu">
            <summary>
            "Stand-alone" shell context menu
            
            It isn't really debugged but is mostly working.
            Create an instance and call ShowContextMenu with a list of FileInfo for the files.
            Limitation is that it only handles files in the same directory but it can be fixed
            by changing the way files are translated into PIDLs.
            
            Based on FileBrowser in C# from CodeProject
            http://www.codeproject.com/useritems/FileBrowser.asp
            
            Hooking class taken from MSDN Magazine Cutting Edge column
            http://msdn.microsoft.com/msdnmag/issues/02/10/CuttingEdge/
            
            Andreas Johansson
            afjohansson@hotmail.com
            http://afjohansson.spaces.live.com
            </summary>
            <example>
               ShellContextMenu scm = new ShellContextMenu();
               FileInfo[] files = new FileInfo[1];
               files[0] = new FileInfo(@"c:\windows\notepad.exe");
               scm.ShowContextMenu(this.Handle, files, Cursor.Position);
            </example>
        </member>
        <member name="M:Peter.ShellContextMenu.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Peter.ShellContextMenu.Finalize">
            <summary>Ensure all resources get released</summary>
        </member>
        <member name="M:Peter.ShellContextMenu.GetContextMenuInterfaces(Peter.ShellContextMenu.IShellFolder,System.IntPtr[],System.IntPtr@)">
            <summary>Gets the interfaces to the context menu</summary>
            <param name="oParentFolder">Parent folder</param>
            <param name="arrPIDLs">PIDLs</param>
            <returns>true if it got the interfaces, otherwise false</returns>
        </member>
        <member name="M:Peter.ShellContextMenu.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This method receives WindowMessages. It will make the "Open With" and "Send To" work 
            by calling HandleMenuMsg and HandleMenuMsg2. It will also call the OnContextMenuMouseHover 
            method of Browser when hovering over a ContextMenu item.
            </summary>
            <param name="m">the Message of the Browser's WndProc</param>
            <returns>true if the message has been handled, false otherwise</returns>
        </member>
        <member name="M:Peter.ShellContextMenu.ReleaseAll">
            <summary>
            Release all allocated interfaces, PIDLs 
            </summary>
        </member>
        <member name="M:Peter.ShellContextMenu.GetDesktopFolder">
            <summary>
            Gets the desktop folder
            </summary>
            <returns>IShellFolder for desktop folder</returns>
        </member>
        <member name="M:Peter.ShellContextMenu.GetParentFolder(System.String)">
            <summary>
            Gets the parent folder
            </summary>
            <param name="folderName">Folder path</param>
            <returns>IShellFolder for the folder (relative from the desktop)</returns>
        </member>
        <member name="M:Peter.ShellContextMenu.GetPIDLs(System.IO.FileInfo[])">
            <summary>
            Get the PIDLs
            </summary>
            <param name="arrFI">Array of FileInfo</param>
            <returns>Array of PIDLs</returns>
        </member>
        <member name="M:Peter.ShellContextMenu.GetPIDLs(System.IO.DirectoryInfo[])">
            <summary>
            Get the PIDLs
            </summary>
            <param name="arrFI">Array of DirectoryInfo</param>
            <returns>Array of PIDLs</returns>
        </member>
        <member name="M:Peter.ShellContextMenu.FreePIDLs(System.IntPtr[])">
            <summary>
            Free the PIDLs
            </summary>
            <param name="arrPIDLs">Array of PIDLs (IntPtr)</param>
        </member>
        <member name="M:Peter.ShellContextMenu.ShowContextMenu(System.IO.FileInfo[],System.Drawing.Point)">
            <summary>
            Shows the context menu
            </summary>
            <param name="files">FileInfos (should all be in same directory)</param>
            <param name="pointScreen">Where to show the menu</param>
        </member>
        <member name="M:Peter.ShellContextMenu.ShowContextMenu(System.IO.DirectoryInfo[],System.Drawing.Point)">
            <summary>
            Shows the context menu
            </summary>
            <param name="dirs">DirectoryInfos (should all be in same directory)</param>
            <param name="pointScreen">Where to show the menu</param>
        </member>
        <member name="M:Peter.ShellContextMenu.ShowContextMenu(System.Drawing.Point)">
            <summary>
            Shows the context menu
            </summary>
            <param name="arrFI">FileInfos (should all be in same directory)</param>
            <param name="pointScreen">Where to show the menu</param>
        </member>
        <member name="M:Peter.ShellContextMenuException.#ctor">
            <summary>Default contructor</summary>
        </member>
        <member name="M:Peter.ShellContextMenuException.#ctor(System.String)">
            <summary>Constructor with message</summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Peter.ShellHelper.HiWord(System.IntPtr)">
            <summary>
            Retrieves the High Word of a WParam of a WindowMessage
            </summary>
            <param name="ptr">The pointer to the WParam</param>
            <returns>The unsigned integer for the High Word</returns>
        </member>
        <member name="M:Peter.ShellHelper.LoWord(System.IntPtr)">
            <summary>
            Retrieves the Low Word of a WParam of a WindowMessage
            </summary>
            <param name="ptr">The pointer to the WParam</param>
            <returns>The unsigned integer for the Low Word</returns>
        </member>
    </members>
</doc>
